import { JobPostData } from "./PostCreationHandler";
import Modal from "react-modal";
import { Dispatch, SetStateAction } from "react";

let styles = {
    form: {
        color: "black"
    }
};

enum JobType {
    Internship = "Internship",
    Job = "Job",
    Research = "Research Program",
    Other = "Other"
}

export default function CreatePostModal({ isOpen, setIsOpen, handleCreation }:
    { isOpen: boolean, setIsOpen: Dispatch<SetStateAction<boolean>>, handleCreation: (data: JobPostData) => void }) {

        function isDateInFuture(dateString: string): boolean {
            if (!dateString) return true; 

            const selectedDate = new Date(dateString);
            const today = new Date();
            
            today.setHours(0, 0, 0, 0);
            
            return selectedDate >= today;
        }

        function generateTitle(company?: string, role?: string, jobType?: string): string {
            if (!role || !company) return "";  
            return `${role} at ${company}${jobType ? `: ${jobType}` : ""}`;
        }
        
        

    function handleClick(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        const {url, company, role, location, description, open, deadline, name, job_type} = Object.fromEntries(formData);

        if (deadline && !isDateInFuture(deadline.toString())) {
            window.alert("Error: Deadline must be a future date");
            return; 
        }

        const autoGeneratedTitle = generateTitle(company?.toString(), role?.toString(), job_type?.toString());

        handleCreation({
            url: url.toString(),
            name: name.toString() || autoGeneratedTitle,
            body: {
                company: company.toString(),
                role: role.toString(),
                location: location.toString(),
                open: open === "on",
                deadline: deadline?.toString(),
                description: description.toString(),
                job_type: job_type as "Internship" | "Job" | "Research" | "Other",
            }
        });
    }

    return (
        <Modal isOpen={isOpen} contentLabel="Create Job Post">
            <form onSubmit={handleClick} style={styles.form}>
                <label htmlFor="name">Title</label>
                <input name="name" />
                <br />
                <label htmlFor="url">Job Link</label>
                <input name="url" type= "url" />
                <br />
                <label htmlFor="company">Company</label>
                <input name="company" required />
                <br />
                <label htmlFor="role">Role</label>
                <input name="role" required />
                <br />
                <label htmlFor="location">Location</label>
                <input name="location" required />
                <br />
                <label htmlFor="open">Job Open?</label>
                <input name="open" type="checkbox" />
                <br />
                <label htmlFor="deadline">Deadline</label>
                <input name="deadline" type="date" />
                <br />
                <label htmlFor="job_type">Type</label>
                <select name="job_type" required defaultValue={undefined}>
                <option value="">Not Selected</option> 
                {Object.values(JobType).map((type) => (
                <option key={type} value={type}>{type}</option>))}
                </select>
                <br />
                <label htmlFor="description">Description</label>
                <textarea name="description" />
                <br />
                <button type="submit">Create Job Post</button>
                <button type="button" onClick={() => setIsOpen(false)}>Cancel</button>
            </form>
        </Modal>
    );
}
