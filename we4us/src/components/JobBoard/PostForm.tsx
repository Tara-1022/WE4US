import { JobType, JobPostData } from "./JobTypes";
import { isDateInFuture } from "../../library/Utils";

let styles = {
    form: {
        color: "black"
    }
};

export default function PostForm({ onClose, handleSubmit, task, initialData }:
    { onClose: () => void, handleSubmit: (data: JobPostData) => void, task: string, initialData?: JobPostData }) {

    function generateTitle(company?: string, role?: string, jobType?: string): string {
        if (!role || !company) return "";
        return `${role} at ${company}${jobType ? `: ${jobType}` : ""}`;
    }

    function handleClick(event: React.FormEvent<HTMLFormElement>) {
        event.preventDefault();
        const formData = new FormData(event.currentTarget);
        const { url, company, role, location, description, deadline, name, job_type } = Object.fromEntries(formData);

        if (deadline && !isDateInFuture(deadline.toString())) {
            window.alert("Error: Deadline must be a future date");
            return;
        }

        const autoGeneratedTitle = generateTitle(company?.toString(), role?.toString(), job_type?.toString());

        try {
            handleSubmit({
                name: name.toString() || autoGeneratedTitle,
                body: {
                    company: company.toString(),
                    role: role.toString(),
                    location: location.toString(),
                    open: true,
                    deadline: deadline?.toString(),
                    description: description.toString(),
                    job_type: job_type as JobType
                },
                ...(url && { url: url.toString() })
            });
        }
        catch (error) {
            window.alert("Could not create post: " + error);
        }
    }

    return (
        <form onSubmit={handleClick} style={styles.form}>
            <label htmlFor="name">Title</label>
            <input name="name" placeholder="Optional" defaultValue={initialData?.name || undefined} />
            <br />
            <label htmlFor="url">Job Link</label>
            <input name="url" type="url" defaultValue={initialData?.url || undefined} />
            <br />
            <label htmlFor="company">Company</label>
            <input name="company" required defaultValue={initialData?.body.company || undefined} />
            <br />
            <label htmlFor="role">Role</label>
            <input name="role" required defaultValue={initialData?.body.role || undefined} />
            <br />
            <label htmlFor="location">Location</label>
            <input name="location" required defaultValue={initialData?.body.location || undefined} />
            <br />
            <label htmlFor="deadline">Deadline</label>
            <input name="deadline" type="date" defaultValue={initialData?.body.deadline || undefined} />
            <br />
            <label htmlFor="job_type">Type</label>
            <select name="job_type" required defaultValue={initialData?.body.job_type || undefined}>
                <option value="">Not Selected</option>
                {Object.values(JobType).map((type) => (
                    <option key={type} value={type}>{type}</option>))}
            </select>
            <br />
            <label htmlFor="description">Description</label>
            <textarea name="description" defaultValue={initialData?.body.description || undefined} />
            <br />
            <button type="submit">{task}</button>
            <button type="reset">Reset</button>
            <button type="button" onClick={onClose}>Cancel</button>
        </form>
    );
}
